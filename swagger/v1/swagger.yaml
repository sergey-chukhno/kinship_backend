---
openapi: 3.0.1
info:
  title: Kinship API V1
  version: v1
  description: REST API for Kinship React Dashboards - Authentication, Users, Projects,
    Companies, Schools, and more
paths:
  "/api/v1/auth/login":
    post:
      summary: User login
      tags:
      - Authentication
      description: Login with email and password, returns JWT token and user with
        available contexts for dashboard switching
      parameters: []
      responses:
        '200':
          description: successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token valid for 24 hours
                    example: eyJhbGciOiJIUzI1NiJ9...
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                      first_name:
                        type: string
                      last_name:
                        type: string
                      full_name:
                        type: string
                      role:
                        type: string
                        enum:
                        - teacher
                        - tutor
                        - voluntary
                        - children
                        description: User role in system
                      avatar_url:
                        type: string
                        nullable: true
                      available_contexts:
                        type: object
                        description: Available dashboards for context switching
                        properties:
                          user_dashboard:
                            type: boolean
                          teacher_dashboard:
                            type: boolean
                          schools:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                name:
                                  type: string
                                role:
                                  type: string
                                  enum:
                                  - member
                                  - intervenant
                                  - referent
                                  - admin
                                  - superadmin
                                permissions:
                                  type: object
                          companies:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                name:
                                  type: string
                                role:
                                  type: string
                                  enum:
                                  - member
                                  - intervenant
                                  - referent
                                  - admin
                                  - superadmin
                                permissions:
                                  type: object
                required:
                - token
                - user
        '401':
          description: email not confirmed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.fr
                  description: User email address
                password:
                  type: string
                  example: password123
                  description: User password
              required:
              - email
              - password
  "/api/v1/auth/me":
    get:
      summary: Get current user
      tags:
      - Authentication
      security:
      - Bearer: []
      description: Get current authenticated user with full context, badges, skills,
        and availability information
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                  first_name:
                    type: string
                  last_name:
                    type: string
                  full_name:
                    type: string
                  role:
                    type: string
                    enum:
                    - teacher
                    - tutor
                    - voluntary
                    - children
                  job:
                    type: string
                    nullable: true
                  birthday:
                    type: string
                    nullable: true
                  certify:
                    type: boolean
                  admin:
                    type: boolean
                  avatar_url:
                    type: string
                    nullable: true
                  take_trainee:
                    type: boolean
                  propose_workshop:
                    type: boolean
                  show_my_skills:
                    type: boolean
                  contact_email:
                    type: string
                    nullable: true
                  confirmed_at:
                    type: string
                    format: date-time
                  available_contexts:
                    type: object
                    description: Available dashboards for this user
                  skills:
                    type: array
                  badges_received:
                    type: array
                  availability:
                    type: object
                    nullable: true
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  "/api/v1/auth/refresh":
    post:
      summary: Refresh JWT token
      tags:
      - Authentication
      security:
      - Bearer: []
      description: Refresh JWT token to extend expiration by 24 hours
      responses:
        '200':
          description: token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: New JWT token valid for 24 hours
                required:
                - token
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  "/api/v1/auth/logout":
    delete:
      summary: User logout
      tags:
      - Authentication
      security:
      - Bearer: []
      description: Logout current user (client-side token removal, server responds
        with 204 No Content)
      responses:
        '204':
          description: successful logout
        '401':
          description: unauthorized
  "/api/v1/badges/assign":
    post:
      summary: Assign badge to users
      tags:
      - Badges
      security:
      - Bearer: []
      description: Assign badge to one or more users (requires badge permission in
        organization)
      parameters: []
      responses:
        '201':
          description: badges assigned
        '403':
          description: forbidden - no active contract
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                badge_assignment:
                  type: object
                  properties:
                    badge_id:
                      type: integer
                    recipient_ids:
                      type: array
                      items:
                        type: integer
                    organization_id:
                      type: integer
                    organization_type:
                      type: string
                      enum:
                      - School
                      - Company
                    project_title:
                      type: string
                    project_description:
                      type: string
                    badge_skill_ids:
                      type: array
                      items:
                        type: integer
                  required:
                  - badge_id
                  - recipient_ids
                  - organization_id
                  - organization_type
  "/api/v1/companies":
    get:
      summary: List companies
      tags:
      - Companies (V1)
      description: "Returns a list of companies with optional filtering. \nBy default,
        only confirmed companies are returned unless admin parameter is set to true.\n"
      parameters:
      - name: full_name
        in: query
        required: false
        description: Filter companies by full name (partial match)
        example: Tech Corp
        schema:
          type: string
      - name: admin
        in: query
        required: false
        description: "Set to \"true\" to include unconfirmed companies (admin access):\n
          * `true` \n * `false` \n "
        enum:
        - 'true'
        - 'false'
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Company ID
                    full_name:
                      type: string
                      description: Full company name
  "/api/v1/projects":
    get:
      summary: Get all available projects
      tags:
      - Projects
      description: Get all public projects and private projects from user organizations
        (if authenticated)
      parameters:
      - name: status
        in: query
        required: false
        enum:
        - pending
        - in_progress
        - finished
        schema:
          type: string
        description: ":\n * `pending` \n * `in_progress` \n * `finished` \n "
      - name: parcours
        in: query
        required: false
        description: Tag ID for parcours filter
        schema:
          type: integer
      - name: start_date_from
        in: query
        required: false
        format: date
        schema:
          type: string
      - name: start_date_to
        in: query
        required: false
        format: date
        schema:
          type: string
      - name: page
        in: query
        required: false
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: 'Default: 12'
        schema:
          type: integer
      responses:
        '200':
          description: projects found
    post:
      summary: Create new project
      tags:
      - Projects
      security:
      - Bearer: []
      description: 'Create new project (defaults: private=false, status=in_progress)'
      parameters: []
      responses:
        '201':
          description: project created
        '403':
          description: forbidden - no org permission
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                project:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    start_date:
                      type: string
                      format: date
                    end_date:
                      type: string
                      format: date
                    participants_number:
                      type: integer
                    private:
                      type: boolean
                    school_level_ids:
                      type: array
                      items:
                        type: integer
                    skill_ids:
                      type: array
                      items:
                        type: integer
                    tag_ids:
                      type: array
                      items:
                        type: integer
                    company_ids:
                      type: array
                      items:
                        type: integer
                  required:
                  - title
                  - description
                  - start_date
                  - end_date
  "/api/v1/projects/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    get:
      summary: Get project details
      tags:
      - Projects
      description: Get single project with all associations
      responses:
        '200':
          description: project found
        '404':
          description: project not found
    patch:
      summary: Update project
      tags:
      - Projects
      security:
      - Bearer: []
      parameters: []
      responses:
        '200':
          description: project updated
        '403':
          description: forbidden - not owner
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                project:
                  type: object
                  properties:
                    title:
                      type: string
                    description:
                      type: string
                    status:
                      type: string
                      enum:
                      - pending
                      - in_progress
                      - finished
    delete:
      summary: Delete project
      tags:
      - Projects
      security:
      - Bearer: []
      description: Delete project (owner only)
      responses:
        '204':
          description: project deleted
  "/api/v1/projects/{id}/join":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: integer
    post:
      summary: Join project
      tags:
      - Projects
      security:
      - Bearer: []
      description: Request to join project (may require organization membership)
      responses:
        '201':
          description: join request created
        '409':
          description: already a member
  "/api/v1/schools":
    get:
      summary: List schools
      tags:
      - Schools (V1)
      description: |
        Returns a list of schools with optional filtering by name, zip code, and school type.
        By default, only confirmed schools are returned unless admin parameter is set to true.
        Results are limited to 20 records.
      parameters:
      - name: name
        in: query
        required: false
        description: Filter schools by name (partial match)
        example: Lycée
        schema:
          type: string
      - name: zip_code
        in: query
        required: false
        description: Filter schools by zip code
        example: '75001'
        schema:
          type: string
      - name: school_type
        in: query
        required: false
        description: Filter schools by type
        example: lycee
        schema:
          type: string
      - name: admin
        in: query
        required: false
        description: "Set to \"true\" to include unconfirmed schools (admin access):\n
          * `true` \n * `false` \n "
        enum:
        - 'true'
        - 'false'
        schema:
          type: string
      - name: q
        in: query
        required: false
        schema:
          type: object
        description: Advanced search query object (Ransack format)
        style: deepObject
        explode: true
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: School ID
                    full_name:
                      type: string
                      description: Full school name
                    zip_code:
                      type: string
                      description: School zip code
                    school_type:
                      type: string
                      description: Type of school (e.g., lycee, college)
  "/api/v1/users/me":
    patch:
      summary: Update current user profile
      tags:
      - Users
      security:
      - Bearer: []
      description: Update current user profile information
      parameters: []
      responses:
        '200':
          description: profile updated
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    first_name:
                      type: string
                    last_name:
                      type: string
                    job:
                      type: string
                    birthday:
                      type: string
                      format: date
                    contact_email:
                      type: string
                      format: email
                    take_trainee:
                      type: boolean
                    propose_workshop:
                      type: boolean
                    show_my_skills:
                      type: boolean
                    skill_ids:
                      type: array
                      items:
                        type: integer
                    sub_skill_ids:
                      type: array
                      items:
                        type: integer
  "/api/v1/users/me/projects":
    get:
      summary: Get my projects
      tags:
      - Users
      - Projects
      security:
      - Bearer: []
      description: Get projects owned by or participated in by current user (NOT all
        org projects)
      parameters:
      - name: status
        in: query
        required: false
        description: "Filter by status:\n * `pending` \n * `in_progress` \n * `finished`
          \n "
        enum:
        - pending
        - in_progress
        - finished
        schema:
          type: string
      - name: by_company
        in: query
        required: false
        description: Filter by company ID
        schema:
          type: integer
      - name: by_school
        in: query
        required: false
        description: Filter by school ID
        schema:
          type: integer
      - name: by_role
        in: query
        required: false
        description: Filter by user role in project
        enum:
        - owner
        - co_owner
        - admin
        - member
        schema:
          type: string
      - name: start_date_from
        in: query
        required: false
        format: date
        schema:
          type: string
      - name: start_date_to
        in: query
        required: false
        format: date
        schema:
          type: string
      - name: page
        in: query
        required: false
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: 'Default: 12'
        schema:
          type: integer
      responses:
        '200':
          description: projects found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_count:
                        type: integer
                      per_page:
                        type: integer
        '401':
          description: unauthorized
  "/api/v1/users/me/badges":
    get:
      summary: Get my badges
      tags:
      - Users
      - Badges
      security:
      - Bearer: []
      description: Get badges received by current user with filtering
      parameters:
      - name: series
        in: query
        required: false
        description: Filter by badge series
        schema:
          type: string
      - name: level
        in: query
        required: false
        description: Filter by badge level
        schema:
          type: integer
      - name: organization_type
        in: query
        required: false
        enum:
        - School
        - Company
        schema:
          type: string
        description: ":\n * `School` \n * `Company` \n "
      - name: organization_id
        in: query
        required: false
        schema:
          type: integer
      - name: page
        in: query
        required: false
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: 'Default: 12'
        schema:
          type: integer
      responses:
        '200':
          description: badges found
  "/api/v1/users/me/organizations":
    get:
      summary: Get my organizations
      tags:
      - Users
      - Organizations
      security:
      - Bearer: []
      description: Get schools and companies user is member of, with role and permissions
      parameters:
      - name: type
        in: query
        required: false
        enum:
        - School
        - Company
        schema:
          type: string
        description: ":\n * `School` \n * `Company` \n "
      - name: status
        in: query
        required: false
        enum:
        - pending
        - confirmed
        schema:
          type: string
      - name: role
        in: query
        required: false
        enum:
        - member
        - intervenant
        - referent
        - admin
        - superadmin
        schema:
          type: string
      responses:
        '200':
          description: organizations found
  "/api/v1/users/me/network":
    get:
      summary: Get my network
      tags:
      - Users
      - Network
      security:
      - Bearer: []
      description: Get users from my organizations (respects branch and partnership
        visibility rules)
      parameters:
      - name: organization_id
        in: query
        required: false
        schema:
          type: integer
      - name: organization_type
        in: query
        required: false
        enum:
        - School
        - Company
        schema:
          type: string
        description: ":\n * `School` \n * `Company` \n "
      - name: role
        in: query
        required: false
        enum:
        - teacher
        - tutor
        - voluntary
        - children
        schema:
          type: string
      - name: has_skills
        in: query
        required: false
        description: Comma-separated skill IDs
        schema:
          type: string
      - name: search
        in: query
        required: false
        description: Search by name or email
        schema:
          type: string
      - name: page
        in: query
        required: false
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: network found
  "/api/v1/users/me/skills":
    patch:
      summary: Update my skills
      tags:
      - Users
      - Skills
      security:
      - Bearer: []
      parameters: []
      responses:
        '200':
          description: skills updated
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                skill_ids:
                  type: array
                  items:
                    type: integer
                sub_skill_ids:
                  type: array
                  items:
                    type: integer
  "/api/v1/users/me/availability":
    patch:
      summary: Update my availability
      tags:
      - Users
      - Availability
      security:
      - Bearer: []
      parameters: []
      responses:
        '200':
          description: availability updated
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                availability:
                  type: object
                  properties:
                    monday:
                      type: boolean
                    tuesday:
                      type: boolean
                    wednesday:
                      type: boolean
                    thursday:
                      type: boolean
                    friday:
                      type: boolean
                    other:
                      type: boolean
  "/api/v1/users/me/avatar":
    post:
      summary: Upload avatar
      tags:
      - Users
      - Avatar
      security:
      - Bearer: []
      description: Upload user avatar (max 5MB, JPEG/PNG/GIF/WebP/SVG)
      parameters: []
      responses:
        '201':
          description: avatar uploaded
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: file
        required: true
    delete:
      summary: Delete avatar
      tags:
      - Users
      - Avatar
      security:
      - Bearer: []
      responses:
        '200':
          description: avatar deleted
        '404':
          description: no avatar to delete
  "/api/v2/users/{id}":
    get:
      summary: Get user details
      tags:
      - Users (V2)
      security:
      - ApiKeyAuth: []
      description: "Returns detailed information about a specific user including their
        skills, badges received, \nand project participation. Access is restricted
        to users who are confirmed members of \ncompanies associated with the API
        access token.\n"
      parameters:
      - name: id
        in: path
        required: true
        description: User ID
        example: 1
        schema:
          type: integer
      - name: token
        in: query
        required: true
        description: API access token for authentication
        example: your-api-token-here
        schema:
          type: string
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  first_name:
                    type: string
                  last_name:
                    type: string
                  email:
                    type: string
                    format: email
                  role:
                    type: string
                  birthday:
                    type: string
                    format: date
                    nullable: true
                  role_additional_information:
                    type: string
                    nullable: true
                  job:
                    type: string
                    nullable: true
                  company_name:
                    type: string
                    nullable: true
                  certify:
                    type: boolean
                  skills:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                  badges_received:
                    type: array
                    items:
                      type: object
                      properties:
                        project_title:
                          type: string
                        project_description:
                          type: string
                        created_at:
                          type: string
                          format: date-time
                        badge:
                          type: object
                          properties:
                            id:
                              type: integer
                            name:
                              type: string
                            level:
                              type: string
                            badge_skills:
                              type: array
                              items:
                                type: object
                                properties:
                                  name:
                                    type: string
                                  category:
                                    type: string
                  project_members:
                    type: array
                    items:
                      type: object
                      properties:
                        project:
                          type: object
                          properties:
                            id:
                              type: integer
                            title:
                              type: string
                            description:
                              type: string
                            skills:
                              type: array
                              items:
                                type: object
                                properties:
                                  name:
                                    type: string
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  "/api/v2/users":
    get:
      summary: List users with pagination
      tags:
      - Users (V2)
      security:
      - ApiKeyAuth: []
      description: |
        Returns a paginated list of users accessible to the API token holder.
        Only users who are confirmed members of companies associated with the API access token are returned.
        Supports search by first name or last name.
      parameters:
      - name: token
        in: query
        required: true
        description: API access token for authentication
        example: your-api-token-here
        schema:
          type: string
      - name: query
        in: query
        required: false
        description: Search query for filtering users by first name or last name
        example: John Doe
        schema:
          type: string
      - name: page
        in: query
        required: false
        description: Page number for pagination
        default: 1
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: User ID
                        first_name:
                          type: string
                          description: User's first name
                        last_name:
                          type: string
                          description: User's last name
                        email:
                          type: string
                          format: email
                          description: User's email address
                        role:
                          type: string
                          description: User's role in the system
                          enum:
                          - teacher
                          - tutor
                          - voluntary
                          - children
                  meta:
                    type: object
                    properties:
                      count:
                        type: integer
                        description: Total number of users
                      pages:
                        type: integer
                        description: Total number of pages
                      prev:
                        type: integer
                        nullable: true
                        description: Previous page number
                      next:
                        type: integer
                        nullable: true
                        description: Next page number
                      page:
                        type: integer
                        description: Current page number
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
servers:
- url: http://localhost:3000
  description: Development server
- url: https://staging.kinship.fr
  description: Staging server
- url: https://kinship.fr
  description: Production server
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /api/v1/auth/login endpoint
    ApiKeyAuth:
      type: apiKey
      in: query
      name: token
      description: API access token for legacy V2 endpoints
